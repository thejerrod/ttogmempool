#include <TFT_eSPI.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

#define BUTTON_1 37  // Button 1 pin
#define BUTTON_2 38  // Button 2 pin

// Initialize the TFT display
TFT_eSPI tft = TFT_eSPI();

// Color scheme
#define BACKGROUND_COLOR TFT_BLACK
#define TEXT_COLOR TFT_WHITE
#define ACCENT_COLOR TFT_CYAN

// API URLs
const char* mempool_api_url = "https://mempool.space/api/v1/fees/recommended";
const char* lightning_api_url = "https://mempool.space/api/v1/lightning/statistics/latest";
const char* block_height_api_url = "https://mempool.space/api/blocks/tip/height";

// Default suggested fees
int fastestFee = 0;
int halfHourFee = 0;
int hourFee = 0;

// Lightning network statistics
int channel_count = 0;
int node_count = 0;
int total_capacity = 0;
int med_fee_rate = 0;

// Current block height
int current_block = 0;

// Button variables
int button1State;
int button2State;
unsigned long lastButtonPress = 0;
int currentDisplay = 0;
int maxDisplay = 4;

void setup() {
  Serial.begin(115200);

  // Initialize the TFT display
  tft.init();
  tft.setRotation(1);
  tft.fillScreen(BACKGROUND_COLOR);
  tft.setTextSize(2);
  tft.setTextColor(TEXT_COLOR);
  
  // Initialize the buttons
  pinMode(BUTTON_1, INPUT_PULLUP);
  pinMode(BUTTON_2, INPUT_PULLUP);
}

void loop() {
  // Get the current time
  unsigned long currentTime = millis();

  // Check if button 1 was pressed
  button1State = digitalRead(BUTTON_1);
  if (button1State == LOW && currentTime - lastButtonPress > 500) {
    currentDisplay--;
    if (currentDisplay < 0) {
      currentDisplay = maxDisplay;
    }
    lastButtonPress = currentTime;
  }

  // Check if button 2 was pressed
  button2State = digitalRead(BUTTON_2);
  if (button2State == LOW && currentTime - lastButtonPress > 500) {
    currentDisplay++;
    if (currentDisplay > maxDisplay) {
      currentDisplay = 0;
    }
    lastButtonPress = currentTime;
  }

  // Display the current page
  switch (currentDisplay) {
    case 0:
      // Display the suggested fees on the TFT display using the TFT_eSPI library
      displaySuggestedFees();
      break;

    case 1:
      // Display the lightning network statistics on the TFT display using the TFT_eSPI library
      displayLightningStats();
      break;

    case 2:
      // Display the current block height on the TFT display using the TFT_eSPI library
      displayBlockHeight();
      break;
  }
}

void displaySuggestedFees() {
  // Clear the screen
  tft.fillScreen(BACKGROUND_COLOR);

  // Send the API request
  HTTPClient http;
  http.begin(mempool_api_url);
  int httpCode = http.GET();

  // If the request was successful, parse the JSON response
  if (httpCode == HTTP_CODE_OK) {
    String jsonStr = http.getString();
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, jsonStr);

    fastestFee = doc["fastestFeerate"];
    halfHourFee = doc["halfHourFeerate"];
    hourFee = doc["hourFeerate"];

    // Display the suggested fees on the TFT display
    tft.setCursor(0, 0);
    tft.print("Suggested Fees (sats/vB)\n");
    tft.setTextColor(ACCENT_COLOR);
    tft.print("Fastest: ");
    tft.setTextColor(TEXT_COLOR);
    tft.print(fastestFee);
    tft.print("\nHalf Hour: ");
    tft.setTextColor(TEXT_COLOR);
    tft.print(halfHourFee);
    tft.print("\nHour: ");
    tft.setTextColor(TEXT_COLOR);
    tft.print(hourFee);
  } else {
    // If the request failed, display an error message on the TFT display
    tft.setCursor(0, 0);
    tft.print("Error: Failed to retrieve suggested fees.");
  }

  // End the HTTP connection
  http.end();
}
void displayLightningStats() {
  // Clear the screen
  tft.fillScreen(BACKGROUND_COLOR);

  // Send the API request
  HTTPClient http;
  http.begin(lightning_api_url);
  int httpCode = http.GET();

  if (httpCode > 0) {
    // Parse the JSON response
    String payload = http.getString();
    const size_t capacity = JSON_OBJECT_SIZE(4) + 70;
    StaticJsonDocument<capacity> doc;
    DeserializationError error = deserializeJson(doc, payload);

    // If parsing the JSON was successful
    if (!error) {
      // Extract the relevant information from the JSON response
      channel_count = doc["channels"];
      node_count = doc["nodes"];
      total_capacity = doc["total_capacity"];
      med_fee_rate = doc["median_fee_sat_per_byte"];

      // Display the Lightning Network statistics on the TFT display
      tft.setCursor(0, 0);
      tft.println("Lightning Network Statistics");
      tft.println();
      tft.print("Channels: ");
      tft.println(channel_count);
      tft.print("Nodes: ");
      tft.println(node_count);
      tft.print("Total Capacity: ");
      tft.println(total_capacity);
      tft.print("Median Fee Rate: ");
      tft.print(med_fee_rate);
      tft.println(" sat/byte");
    } else {
      // If parsing the JSON failed, display an error message
      tft.println("Error: Failed to parse JSON response");
    }
  } else {
    // If the API request failed, display an error message
    tft.println("Error: Failed to retrieve Lightning Network statistics");
  }

  // Clean up
  http.end();
}
void displayBlockHeight() {
  // Clear the screen
  tft.fillScreen(BACKGROUND_COLOR);

  // Send the API request
  HTTPClient http;
  http.begin(block_height_api_url);
  int httpCode = http.GET();

  // Check if the request was successful
  if (httpCode == 200) {
    // Parse the JSON response
    String response = http.getString();
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, response);
    
    // Get the current block height from the response
    current_block = doc["height"];

    // Display the current block height on the TFT display
    tft.setCursor(0, 50);
    tft.printf("Current Block Height:\n");
    tft.printf("%d", current_block);
  }
  else {
    // Display an error message on the TFT display
    tft.setCursor(0, 50);
    tft.printf("Error: Unable to retrieve block height");
  }

  // End the HTTP connection
  http.end();
}
